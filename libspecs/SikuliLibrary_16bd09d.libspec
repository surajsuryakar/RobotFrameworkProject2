<?xml version="1.0" encoding="UTF-8"?>
<keywordspec format="ROBOT" generated="2022-09-24T05:20:09Z" lineno="34" name="SikuliLibrary" namedargs="true" scope="GLOBAL" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\SikuliLibrary\__init__.py" specversion="2" type="LIBRARY">
<version>2.0.0</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Documentation for library ``SikuliLibrary``.</doc>
<init lineno="38" source="..\Programs\Python\Python37\Lib\site-packages\SikuliLibrary\sikuli.py">
<arguments>
<arg>port=0</arg>
<arg>timeout=3.0</arg>
<arg>mode=OLD</arg>
</arguments>
<doc>
        @port: sikuli java process socket port
        @timeout: Timeout of waiting java process started
        @mode: if set as 'DOC',  will stop java process automatically, 
               if set as 'PYTHON', means library is running out of robot environment
               if set as 'CREATE', it is only for mvn package usage, will create keywords.py file
               if set as 'OLD'(default), sikuli java process will be started when library is inited
               if set as 'NEW', user should use 'start_sikuli_process' to start java process</doc>
</init>
<kw name="Add Image Path">
<arguments>
<arg>path</arg>
</arguments>
<doc>Add image path</doc>
</kw>
<kw name="Capture Region">
<arguments>
<arg>cooridnates</arg>
</arguments>
<doc>Capture region


Capture region passed
Examples:
| ${screenshotname}= | Capture region | [x, y, w, h] |</doc>
</kw>
<kw name="Capture Roi">
<arguments>
</arguments>
<doc>Capture Roi</doc>
</kw>
<kw name="Capture Screen">
<arguments>
</arguments>
<doc>Capture whole screen, file name is returned</doc>
</kw>
<kw name="Change Screen Id">
<arguments>
<arg>screenId</arg>
</arguments>
<doc>Change screen id
 For multi display, user could use this keyword to switch to the correct screen

 Examples:
 | Change screen id | 1 |</doc>
</kw>
<kw name="Clear All Highlights">
<arguments>
</arguments>
<doc>Clear all highlights from screen</doc>
</kw>
<kw name="Clear Highlight">
<arguments>
<arg>image</arg>
</arguments>
<doc>Clear highlight from screen</doc>
</kw>
<kw name="Click">
<arguments>
<arg>image</arg>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
</arguments>
<doc>Click

Click on an image with similarity and offset.
Examples:
| Click | hello.png |</doc>
</kw>
<kw name="Click In">
<arguments>
<arg>areaImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Click in. 
Click target image in area image.</doc>
</kw>
<kw name="Click Nth">
<arguments>
<arg>image</arg>
<arg>index</arg>
<arg>similarity</arg>
<arg>sortByColumn=true</arg>
</arguments>
<doc>Click nth

 Click on specific image.
 Optionally pass similarity and sort by column or row.

 Examples:
 | Click on nth image in region | image.png | 1 | 0.9 |
 | Click on nth image in region | image.png | 1 | 0.9 | ${FALSE} |</doc>
</kw>
<kw name="Click On Match">
<arguments>
<arg>match</arg>
</arguments>
<doc>Click On Match
 there's no offset to be configured
 works with the keyword Return Match From Region</doc>
</kw>
<kw name="Click On Region">
<arguments>
<arg>region</arg>
</arguments>
<doc>Click On Region
 there's no offset to be configured
 works with the keyword Get Extended Region From</doc>
</kw>
<kw name="Click Region">
<arguments>
<arg>cooridnates</arg>
<arg>waitChange=0</arg>
<arg>timeout=0</arg>
</arguments>
<doc>Click region

 Click on defined region cooridinates.
 Optionally Wait for specified time to ensure region has changed.
 Also, optionally set highlight

 Examples:
 | Click on region | [x,y,w,h] | image.png |
 | Click on region | [x,y,w,h] | image.png | 0 |
 | Click on region | [x,y,w,h] | image.png | 0 | 2 |</doc>
</kw>
<kw name="Click Text">
<arguments>
<arg>text</arg>
</arguments>
<doc>Click Text

Click on text.
Examples:
| Click Text | Hello |</doc>
</kw>
<kw name="Close Application">
<arguments>
<arg>name</arg>
</arguments>
<doc>Close application</doc>
</kw>
<kw name="Double Click">
<arguments>
<arg>image</arg>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
</arguments>
<doc>Double click</doc>
</kw>
<kw name="Double Click In">
<arguments>
<arg>areaImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Double click in. 
Double click target image in area image.</doc>
</kw>
<kw name="Double Click On Match">
<arguments>
<arg>match</arg>
</arguments>
<doc>Double Click On Match
 there's no offset to be configured
 works with the keyword Return Match From Region</doc>
</kw>
<kw name="Double Click On Region">
<arguments>
<arg>region</arg>
</arguments>
<doc>Double Click On Region
 there's no offset to be configured
 works with the keyword Get Extended Region From</doc>
</kw>
<kw name="Drag And Drop">
<arguments>
<arg>srcImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Drag the source image to target image.
If source image is empty, drag the last match and drop at given target</doc>
</kw>
<kw name="Drag And Drop By Offset">
<arguments>
<arg>srcImage</arg>
<arg>xOffset</arg>
<arg>yOffset</arg>
</arguments>
<doc>Drag the source image to target by offset.
If source image is empty, drag the last match and drop at given target</doc>
</kw>
<kw name="Exists">
<arguments>
<arg>image</arg>
<arg>timeout=</arg>
</arguments>
<doc>Exists

 Check whether image exists in screen
 @image: expected image in screen
 @timeout: wait seconds

 Examples:
 | ${is_exist}=  | Exists | image.png | 0 |</doc>
</kw>
<kw name="From Region Jump To">
<arguments>
<arg>region</arg>
<arg>direction</arg>
<arg>jumps</arg>
<arg>margin</arg>
</arguments>
<doc>From Region Jump To
 Create a region and translate it related to the given region, the created region will have the exactly same height and width as the passed one 
 ${jumps} = number of 'jumps' to move, like on a chess game, jumps will be the number of squares a piece moves 
 ${direction} = | below | above | left | right | 
 ${margem} = add a space between jumps, must be &gt;= 1 
 |${translated_region} =    |    From Region Jump To  |  ${original_region}  |    below   |   4   |    1   |</doc>
</kw>
<kw name="Get Current Screen Id">
<arguments>
</arguments>
<doc>Get current screen id</doc>
</kw>
<kw name="Get Extended Region From">
<arguments>
<arg>image</arg>
<arg>direction</arg>
<arg>number_of_times_to_repeat</arg>
</arguments>
<doc>Get extended region from
 Extended the given image creating a region above or below with the same width
 The height can change using the multiplier @number_of_times_to_repeat, if 2 is given the new region will have twice the height of the orignalge</doc>
</kw>
<kw name="Get Extended Region From Image">
<arguments>
<arg>image</arg>
<arg>direction</arg>
<arg>number of times to repeat</arg>
</arguments>
<doc>Get Extended Region From Image
 Extended the given image creating a new region above, below, on the left or on the right side, with the same height and width
 The height and width can change using the multiplier @number_of_times_to_repeat 
 If orginal if giver as arguments, the region will be exactly the same location as the image, last argument is ignored 
 Ex: If 2 is given and direction = below the new region will have twice the height of the given image and will be located right below it
 |${region} =    |    Get Extended Region From Image  |  image.png  |    below   |   1   |
 |${region} =    |    Get Extended Region From Image  |  image.png  |    original   |   1 #this argument is ignored   |</doc>
</kw>
<kw name="Get Extended Region From Region">
<arguments>
<arg>image</arg>
<arg>direction</arg>
<arg>number of times to repeat</arg>
</arguments>
<doc>Get Extended Region From Region
 Extended the given image creating a region above, below, in the left side or on the right, with the same height and width
 The height and width can change using the multiplier @number_of_times_to_repeat 
 If 2 is given and direction = below the new region will have twice the height of the orignal and will be located right below it
 |${below_region} =    |    Get Extended Region From Region  |  ${another_region}  |    below   |   1   |</doc>
</kw>
<kw name="Get Image Coordinates">
<arguments>
<arg>image</arg>
<arg>coordinates=[]</arg>
</arguments>
<doc>Get Image Coordinates

 Return image coordinates, within region
 Examples:
 | ${imageCoordinates}= | Get Image Coordinates | image.png=0.75 |
 | ${imageCoordinates}= | Get Image Coordinates | image.png=0.75 | [x, y, w, z] |</doc>
</kw>
<kw name="Get Match Score">
<arguments>
<arg>image</arg>
</arguments>
<doc>Get match scoreTries to find the image on the screen, returns accuracy score (0-1)

 Examples:
 | ${score} = | Get Match Score |  somethingThatMayExist.png |
 | Run Keyword if | ${score} &gt; 0.95 | keyword1 | ELSE | keyword2 |</doc>
</kw>
<kw name="Get Number Of Screens">
<arguments>
</arguments>
<doc>Get number of screens</doc>
</kw>
<kw name="Get Screen Coordinates">
<arguments>
</arguments>
<doc>Get screen coordinates

Return screen coordinates for active screen

Examples:
| @{coordinates}=  | Get Screen Coordinates | 0 |</doc>
</kw>
<kw name="Get Text">
<arguments>
<arg>image=</arg>
</arguments>
<doc>Get text

 If image is not given, keyword will get text from whole Screen
 If image is given, keyword will get text from matched region
 Call keyword setOcrTextRead to set OcrTextRead as true, before using text recognition keywords

 Examples:
 | Set Ocr Text Read  | true       |
 | Get Text           |
 | Get Text           | test.png   |</doc>
</kw>
<kw name="Highlight">
<arguments>
<arg>image</arg>
<arg>secs=</arg>
</arguments>
<doc>Highlight matched image.
 If secs is set, highlight will vanish automatically after setted seconds</doc>
</kw>
<kw name="Highlight Region">
<arguments>
<arg>cooridnates</arg>
<arg>timeout</arg>
</arguments>
<doc>Highlight region</doc>
</kw>
<kw name="Highlight Roi">
<arguments>
<arg>timeout</arg>
</arguments>
<doc>Highlight ROI</doc>
</kw>
<kw name="Image Count">
<arguments>
<arg>steps</arg>
<arg>image=</arg>
</arguments>
<doc>Image Count
 Count how many times the same picture is detected in screen.

 Examples:
 | ${image_cnt}=  |  Image Count  | test.png  |</doc>
</kw>
<kw name="Input Text">
<arguments>
<arg>image</arg>
<arg>text</arg>
</arguments>
<doc>Input text
 Image could be empty

 Examples:
 | Input text | Sikuli |</doc>
</kw>
<kw name="Mouse Down">
<arguments>
<arg>*mouseButtons</arg>
</arguments>
<doc>Mouse down
 Press and hold the specified buttons

 @mouseButtons: Could be LEFT, MIDDLE, RIGHT

 Examples:
 | Mouse Move   | test.png | 
 | Mouse Down   | LEFT     | RIGHT |
 | Mouse Up     |</doc>
</kw>
<kw name="Mouse Move">
<arguments>
<arg>image=</arg>
</arguments>
<doc>Mouse moveMove the mouse pointer to the target

 @image: if image is empty, will move mouse to the last matched.

 Examples:
 | Mouse Move              | test.png | 
 | Screen Should Contain   | test.png | 
 | Mouse Move |</doc>
</kw>
<kw name="Mouse Up">
<arguments>
<arg>*mouseButtons</arg>
</arguments>
<doc>Mouse up
 Release the specified mouse buttons

 @mouseButtons: Could be LEFT, MIDDLE, RIGHT. If empty, all currently held buttons are released

 Examples:
 | Mouse Move   | test.png | 
 | Mouse Down   | LEFT     | RIGHT |
 | Mouse Up     | LEFT     | RIGHT |</doc>
</kw>
<kw name="Open Application">
<arguments>
<arg>path</arg>
</arguments>
<doc>Open application
 To open app with parameters, refer:
 https://sikulix-2014.readthedocs.io/en/latest/appclass.html#App.App</doc>
</kw>
<kw name="Paste Text">
<arguments>
<arg>image</arg>
<arg>text</arg>
</arguments>
<doc>Paste text. Image could be empty</doc>
</kw>
<kw name="Press Special Key">
<arguments>
<arg>keyConstant</arg>
</arguments>
<doc>Press special key
 Presses a special keyboard key.

 For a list of possible Keys view docs for org.sikuli.script.Key .

 Examples:
 | Double Click | textFieldWithDefaultText.png | 
 | Press Special Key | DELETE |</doc>
</kw>
<kw name="Read Text From Region">
<arguments>
<arg>reg</arg>
</arguments>
<doc>Read text from region</doc>
</kw>
<kw name="Remove Image Path">
<arguments>
<arg>path</arg>
</arguments>
<doc>Remove image path</doc>
</kw>
<kw name="Reset Roi">
<arguments>
</arguments>
<doc>Reset ROI
 Set Region of interest to full screen

 Examples:
 | Reset roi |</doc>
</kw>
<kw name="Return Match From Region">
<arguments>
<arg>region</arg>
<arg>target</arg>
</arguments>
<doc>Return Match From Region
 expect a region (from keyword Get Extended Region From) and a target to be search for (an image.png)
 returns the target as a object (string), it can be used with Click On Match keywords</doc>
</kw>
<kw name="Right Click">
<arguments>
<arg>image</arg>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
</arguments>
<doc>Right click

Click on an image with similarity and offset.
Examples:
| Click | hello.png |</doc>
</kw>
<kw name="Right Click In">
<arguments>
<arg>areaImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Right click in. 
Right click target image in area image.</doc>
</kw>
<kw name="Screen Should Contain">
<arguments>
<arg>image</arg>
</arguments>
<doc>Screen should contain</doc>
</kw>
<kw name="Screen Should Not Contain">
<arguments>
<arg>image</arg>
</arguments>
<doc>Screen should not contain
 Screen should not contain image

 Examples:
 | Screen should not contain | image.png |</doc>
</kw>
<kw name="Select Region">
<arguments>
<arg>message</arg>
</arguments>
<doc>Select Region

 Allow user to select a region and capture it.
 Return array of [capturedImagePath, x, y, w, h]

 Examples:
 | @{SelectedRegion}= | Select region |</doc>
</kw>
<kw name="Set Capture Folder">
<arguments>
<arg>path</arg>
</arguments>
<doc>Set captured folder

Set folder for captured images
Examples:
| Set captured folder | PATH |</doc>
</kw>
<kw name="Set Capture Matched Image">
<arguments>
<arg>value</arg>
</arguments>
<doc>Set capture matched image

Set capture matched images, the default value is true
Examples:
| Set Capture Matched Image | false |</doc>
</kw>
<kw name="Set Min Similarity">
<arguments>
<arg>minSimilarity</arg>
</arguments>
<doc>Set min similarity</doc>
</kw>
<kw name="Set Move Mouse Delay">
<arguments>
<arg>delay</arg>
</arguments>
<doc>Set move mouse delay</doc>
</kw>
<kw name="Set Ocr Text Read">
<arguments>
<arg>ocrTextRead</arg>
</arguments>
<doc>OCR text read</doc>
</kw>
<kw name="Set Roi">
<arguments>
<arg>cooridnates</arg>
<arg>timeout=0</arg>
</arguments>
<doc>Set ROI

 Set region of interest on screen
 Optionally pass highlight timeout.

 Examples:
 | Set ROI | [x, y, w, h] |
 | Set ROI | [x, y, w, h] | 2 |</doc>
</kw>
<kw name="Set Show Actions">
<arguments>
<arg>showActions</arg>
</arguments>
<doc>Set show actions</doc>
</kw>
<kw name="Set Slow Motion Delay">
<arguments>
<arg>delay</arg>
</arguments>
<doc>Set slow motion delay
 Control the duration of the visual effect (seconds).</doc>
</kw>
<kw name="Set Timeout">
<arguments>
<arg>timeout</arg>
</arguments>
<doc>Set timeout

Set Sikuli timeout(seconds)
Examples:
| Set timeout | 10 |</doc>
</kw>
<kw name="Set Wait Scan Rate">
<arguments>
<arg>delay</arg>
</arguments>
<doc>Set wait scan rate
 Specify the number of times actual search operations are performed per second while waiting for a pattern to appear or vanish.</doc>
</kw>
<kw name="Start Sikuli Process">
<arguments>
<arg>port=None</arg>
</arguments>
<doc>
        This keyword is used to start sikuli java process.
        If library is inited with mode "OLD", sikuli java process is started automatically.
        If library is inited with mode "NEW", this keyword should be used.

        :param port: port of sikuli java process, if value is None or 0, a random free port will be used
        :return: None</doc>
</kw>
<kw name="Stop Remote Server">
<arguments>
</arguments>
<doc>Stops the remote server.

The server may be configured so that users cannot stop it.</doc>
</kw>
<kw name="Type With Modifiers">
<arguments>
<arg>text</arg>
<arg>*modifiers</arg>
</arguments>
<doc>Type with modifiers

 Examples:
 |Type With Modifiers| A | CTRL |</doc>
</kw>
<kw name="Wait For Image">
<arguments>
<arg>wantedImage</arg>
<arg>notWantedImage</arg>
<arg>timeout</arg>
</arguments>
<doc>Wait For Image

 Check wantedImage exist. If notWantedImage appear or timeout happened, throw exception

 @wantedImage: expected image in screen

 @notWantedImage: unexpected image in screen

 @timeout: wait seconds

 Examples:
 | Wait For Image  | wanted.png | notWanted.png | 5 |</doc>
</kw>
<kw name="Wait For Multiple Images">
<arguments>
<arg>timeout</arg>
<arg>pollingInterval</arg>
<arg>expectedImages</arg>
<arg>notExpectedImages</arg>
</arguments>
<doc>Wait For Multiple Images

 Check if images exists in expectedImages or notExpectedImages list. If image appears that is listed in notExpectedImages list or timeout happened, throw exception If image appears that is listed in expectedImageslist return succesfully. 

 @timeout: wait seconds

 @pollingInterval: time in seconds between screen checks

 @expectedImages: list of expected images in screen

 @notExpectedImages: list of not expected images in screen

 Examples:
 | @{wanted_images} =  | Create List | wanted_image1.png | wanted_image2.png |
 | @{not_wanted_images} =  | Create List | not_wanted_image1.png | not_wanted_image2.png | not_wanted_image3.png |
 | Wait For Multiple Images | 900 | 10 | ${wanted_images} | ${not_wanted_images} |</doc>
</kw>
<kw name="Wait Until Screen Contain">
<arguments>
<arg>image</arg>
<arg>timeout</arg>
</arguments>
<doc>Wait until screen contain
 Wait until image shown in screen</doc>
</kw>
<kw name="Wait Until Screen Not Contain">
<arguments>
<arg>image</arg>
<arg>timeout</arg>
</arguments>
<doc>Wait until screen not contain
 Wait until image not in screen</doc>
</kw>
<kw name="Wheel Down">
<arguments>
<arg>steps</arg>
<arg>image=</arg>
</arguments>
<doc>Wheel down
 Move mouse to the target, and wheel down with give steps

 Examples:
 | Wheel Down     | 5   | 
 | Wheel Down     | 5   |  test.png   |</doc>
</kw>
<kw name="Wheel Up">
<arguments>
<arg>steps</arg>
<arg>image=</arg>
</arguments>
<doc>Wheel up
 Move mouse to the target, and wheel up with give steps

 Examples:
 | Wheel Up     | 5   | 
 | Wheel Up     | 5   |  test.png   |</doc>
</kw>
</keywordspec>