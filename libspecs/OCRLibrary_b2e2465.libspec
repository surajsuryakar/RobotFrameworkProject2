<?xml version="1.0" encoding="UTF-8"?>
<keywordspec format="ROBOT" generated="2022-09-24T05:20:00Z" lineno="15" name="OCRLibrary" namedargs="true" scope="GLOBAL" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\__init__.py" specversion="2" type="LIBRARY">
<version>2.0.0</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>OCRLibrary is an image reading and processing library for Robot Framework.

The OCR component of OCRLibrary utilizes pytesseract, which is a python wrapper for Google's Tesseract OCR.
Image processing is done through the opencv-python package.

Please note that recogizing all characters and their locations from screenshots is not guaranteed. Although processing the
image will increase the chances for the desired characters to be read or located.

= Information On Image Transformations =
[https://docs.opencv.org/4.5.2/d7/d4d/tutorial_py_thresholding.html | OpenCV Thresholding Documentation]
[https://docs.opencv.org/4.5.2/d9/d61/tutorial_py_morphological_ops.html | OpenCV Morphological Transformation Documentation]
[https://docs.opencv.org/4.5.2/df/d9d/tutorial_py_colorspaces.html | OpenCV Changing Colourspaces Documentation]
[https://docs.opencv.org/4.5.2/d4/d13/tutorial_py_filtering.html | OpenCV Smoothing Image Documentation]

== Using And Not Using OSTU ==
Information on keywords that use the ``apply_otsu`` argument.

List of current keywords that can use OTSU:
``Get Binary Image``, ``Get To Zero Image`` and, ``Get Trunc Image``

=== Using OTSU ===
Enabling otsu (``apply_otsu = True``) for thresholding keywords determines the threshold value automatically.
When otsu is enabled, the image processing keyword will return a tuple. Index 0 contains the optimal threshold
value found by the ostu threshold, and index 1 has the binary image.

For an example, please see the example ``Using Get To Zero Image`` [https://github.com/bendurston/robotframework-ocrlibrary/blob/main/examples/keyword_usage.robot | in the keyword usage file.]

=== Not Using OTSU ===
When ``apply_otsu = False`` threshold values must be provided. For more detail about the thresholding arguments,
please see the OpenCV thresholding documentation listed above.

For an example, please see the example ``Using Get Trunc Image`` [https://github.com/bendurston/robotframework-ocrlibrary/blob/main/examples/keyword_usage.robot | in the keyword usage file.]

== Keywords With Apply Prefix ==
This information pertains to the keywords with the ``Apply`` prefix.
=== Kernel Size Argument ===
There are a few minor differences with this argument for some keywords.

``Apply Median Filtering To Image`` takes a kernel size as an integer that is odd and greater than 0.

``Apply Gaussian Blur To Image`` takes a kernel size as a tuple/list where the values must be positive odd integers.

The rest of the keywords take a kernel size as a tuple/list where the values must be postive.

=== Kernel Type Argument ===
Keywords that require a ``kernel_type`` take the given kernel size and create a structured element. The integer provided as
the kernel type will determine the shape of the structured element. 0 will be a rectangle, 1 will be an ellipse, 
and 2 will be a cross.

=== Iteration Argument ===
Iteration is the number of times the transformation is performed on the image. The ``iteration`` can be any positive integer
greater than 0.

=== Depth Argument ===
Depth represents the desired depth of the destination image. When ``depth=-1`` the output image will have the same depth as the source.

== Pytesseract Configuration Strings ==
Please see [https://github.com/bendurston/robotframework-ocrlibrary#custom-configurations-for-reading-images |the OCRLibrary README.md] for an in depth explanation of the ``pyt_conf`` argument.

Example:
| ${img_path}=    Capture Page Screenshot
| ${processed_img}=     Read Image  ${img_path}
| ${content}=   Get Image Content   ${processed_img}    --psm 6 -c tessedit_char_whitelist=0123456789   eng
Note: Only use one space between each configuration in the ``pyt_conf`` argument.

== Masking Colours ==
Users are able to mask (maintain) colours that exist within the provided upper and lower bounds. A BGR or HSV image can be
used for either ``Mask Colour`` or ``Mask Colours``. Bounds can be either a list of a tuple, and each index must be of type int.
Representation of BGR and HSV bounds respectively: (blue value, green value, red value), (hue value, saturation value, brightness value).

For more detail about the masking colours, please see the OpenCV changing colourspaces documentation listed above.

Please see the [https://github.com/bendurston/robotframework-ocrlibrary/blob/main/examples/keyword_usage.robot |keyword_usage.robot file] for an example of the Mask Colour or Mask Colours keywords.

== Reading And Saving Images ==
Please see the list of the following [https://docs.opencv.org/master/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56 |formats that are supported] for image reading.

Please see the [https://docs.opencv.org/master/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce |list of exceptions] for saving an image.</doc>
<kw lineno="64" name="Apply Averaging Blur To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\smoothing_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
</arguments>
<doc>Applies the averaging blur to the provided image.  Kernel size must be a tuple/list of positive ints.

See ``Apply Filter2D To Image`` for example of general usage.

See `introduction` for details about using arguments.

For more details about this transformation see the OpenCV smoothing images documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="233" name="Apply Black Hat To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the black hat morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

See ``Apply Erosion To Image`` for example of general usage.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="161" name="Apply Closing To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the closing morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

See ``Apply Erosion To Image`` for example of general usage.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="113" name="Apply Dilation To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the dilation morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

See ``Apply Erosion To Image`` for example of general usage.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="85" name="Apply Erosion To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the erosion morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

Example:
| ${img_path}=    Capture Page Screenshot
| ${processed_img}=    Get Binary Image    ${img_path}
| ${kernel_size}=    Create List    1    1
| ${eroded_img}=    Apply Erosion To Image    ${processed_img}    ${kernel_size}

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="20" name="Apply Filter2D To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\smoothing_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>depth=-1</arg>
</arguments>
<doc>Applies the filter2D filter to the provided image. Kernel size must be a tuple/list of positive ints.

Example:
| ${img_path}=    Capture Page Screenshot
| ${processed_img}=    Read Image    ${img_path}
| ${kernel_size}=    Create List    1    1
| ${filtered_img}=    Apply Filter2D To Image    ${processed_img}    ${kernel_size}

See `introduction` for details about using arguments.

For more details about this transformation see the OpenCV smoothing images documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="79" name="Apply Gaussian Blur To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\smoothing_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
</arguments>
<doc>Applies the gaussian blur to the provided image. Kernel size must be a tuple/list of positive and odd ints.

See `introduction` for details about using arguments.

For more details about this transformation see the OpenCV smoothing images documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="185" name="Apply Gradient To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the gradient morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

See ``Apply Erosion To Image`` for example of general usage.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="50" name="Apply Median Filtering To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\smoothing_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
</arguments>
<doc>Applies the median filter to the provided image.
``kernel_size`` takes an integer that is odd and greater than 0. Not a tuple/list.

See `introduction` for details about using arguments.

For more details about this transformation see the OpenCV smoothing images documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="137" name="Apply Opening To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the opening morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

See ``Apply Erosion To Image`` for example of general usage.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="209" name="Apply Top Hat To Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>kernel_size</arg>
<arg>kernel_type=0</arg>
<arg>iteration=1</arg>
</arguments>
<doc>Applies the top hat morphological transformation to a binary image. Kernel size must be a tuple/list of positive ints.

See ``Apply Erosion To Image`` for example of general usage.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV morphological transformation documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="18" name="Convert Image To Gray Scale" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\changing_colourspace_transformation.py">
<arguments>
<arg>processed_img</arg>
</arguments>
<doc>Converts any image read to gray scale.

Example:
| ${path}=    Capture Page Screenshot
| ${processed_img}=    Read Image   ${img_path}
| ${gray_scale_image}=    Get Gray Scale Image    ${path}</doc>
</kw>
<kw lineno="30" name="Convert Image To HSV" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\changing_colourspace_transformation.py">
<arguments>
<arg>processed_img</arg>
</arguments>
<doc>Converts any image read as bgr into hsv colour scheme.

Example:
| ${img_path}=     Capture Page Screenshot
| ${processed_img}=    Read Image   ${img_path}
| ${hsv_img}=     Convert Image To HSV    ${processed_img}</doc>
</kw>
<kw lineno="27" name="Get Binary Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>img_path</arg>
<arg>apply_otsu=False</arg>
<arg>inverse=False</arg>
<arg>max_threshold=255</arg>
<arg>threshold=127</arg>
</arguments>
<doc>Converts an image to a binary image.

See `introduction` for details about using arguments.

For more details about this transformation see the OpenCV image thresholding documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="23" name="Get Image Content" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\content_validation.py">
<arguments>
<arg>processed_img</arg>
<arg>pyt_conf=--psm 6</arg>
<arg>lang=eng</arg>
</arguments>
<doc>Gets the text found within the provided processed image.

See `Pytesseract Configuration Strings` for details about pyt_conf and lang arguments.</doc>
</kw>
<kw lineno="43" name="Get To Zero Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>img_path</arg>
<arg>apply_otsu=False</arg>
<arg>inverse=False</arg>
<arg>max_threshold=255</arg>
<arg>threshold=127</arg>
</arguments>
<doc>Converts an image to a tozero image.
All values considered black (if inverse is False) will be set to black, the rest of
the image will remain in gray scale. If inverse is true, the values considered to be white will be set to black,
the rest of the image will remain in gray scale.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV image thresholding documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="62" name="Get Trunc Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\binary_image_transformation.py">
<arguments>
<arg>img_path</arg>
<arg>apply_otsu=False</arg>
<arg>max_threshold=255</arg>
<arg>threshold=127</arg>
</arguments>
<doc>Converts an image to gray scale and applies truncation threshold. Values considered to be white will be set to white, the
rest of the image will remain gray scale.

See `introduction` for details about using the arguments.

For more details about this transformation see the OpenCV image thresholding documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="72" name="Locate Multiple Text Bounds" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\content_location.py">
<arguments>
<arg>processed_img</arg>
<arg>text</arg>
<arg>pyt_conf=--psm 6</arg>
<arg>lang=eng</arg>
</arguments>
<doc>Locates the bounds found around more than one instance of the provided text. This keyword can also be used if there is one occurrance
of the text. A list of tuples containing the bounds are returned if the text is found. Returns None if nothing is found.

See ``Locate Text Bounds`` documentation for an example of what each index in the tuple corresponds to.

See `Pytesseract Configuration Strings` for details about pyt_conf and lang arguments.

Please note: as of version 1.2.0 this keyword only finds the coordinates of a single word. This will not
work for sentances.</doc>
</kw>
<kw lineno="29" name="Locate Multiple Text Coordinates" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\content_location.py">
<arguments>
<arg>processed_img</arg>
<arg>text</arg>
<arg>pyt_conf=--psm 6</arg>
<arg>lang=eng</arg>
</arguments>
<doc>Locates the coordiantes of more than one instance of the provided text. This keyword can also be used if there is only
one occurrance of the text. A list of coordinates found is return, each index stores a tuple (x, y).
If nothing is found, None is returned.

See `Pytesseract Configuration Strings` for details about pyt_conf and lang arguments.

Please note: as of version 1.2.0 this keyword only finds the coordinates of a single word. This will not
work for sentances.</doc>
</kw>
<kw lineno="44" name="Locate Text Bounds" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\content_location.py">
<arguments>
<arg>processed_img</arg>
<arg>text</arg>
<arg>pyt_conf=--psm 6</arg>
<arg>lang=eng</arg>
</arguments>
<doc>Locates the bounds found around the provided text. This keyword gets the first occurrance of the text.
Use ``Locate Multiple Text Bounds`` if there is more than one occurrance of the text.
A tuple of the bounds is returned. Returns None if nothing is found.

Example:
| ${result}=    Locate Text Bounds    ${processed_img}    OK
| ${x}=    Set Variable    ${result}[0]
| ${y}=    Set Variable    ${result}[1]
| ${w}=    Set Variable    ${result}[2]
| ${h}=    Set Variable    ${result}[3]

Bounds refer to the box around the word "OK".
- x represents the bound furthest to the left.
- y represents the top of the bound.
- w represents the width of the bound.
- h represents the height of the bound.

See `Pytesseract Configuration Strings` for details about pyt_conf and lang arguments.

Please note: as of version 1.2.0 this keyword only finds the coordinates of a single word. This will not
work for sentances.</doc>
</kw>
<kw lineno="14" name="Locate Text Coordinates" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\content_location.py">
<arguments>
<arg>processed_img</arg>
<arg>text</arg>
<arg>pyt_conf=--psm 6</arg>
<arg>lang=eng</arg>
</arguments>
<doc>Locates the coordinates of the provided text. This keyword gets the first occurrance of the text.
Use ``Locate Multiple Text Coordinates`` if there is more than one occurrance of the text.
The coordinates found are returned as a tuple (x, y). If nothing is found, None is returned.

See `Pytesseract Configuration Strings` for details about pyt_conf and lang arguments.

Please note: as of version 1.2.0 this keyword only finds the coordinates of a single word. This will not
work for sentances.</doc>
</kw>
<kw lineno="42" name="Mask Colour" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\changing_colourspace_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>lower_bound_colour</arg>
<arg>upper_bound_colour</arg>
</arguments>
<doc>Mask all colours in an image that are not within the provided bounds. Masked colours become black.

Example of masking all colours but red in a BGR image:
| ${img_path}=     Capture Page Screenshot
| ${processed_img}=    Read Image   ${img_path}
| ${lower}=   Create List     0   0   200
| ${upper}=   Create List     0   0   255
| ${masked_img}=      Mask Colour     ${processed_img}    ${lower}    ${upper}

For more details about this transformation see the OpenCV changing colourspaces documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="62" name="Mask Colours" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\changing_colourspace_transformation.py">
<arguments>
<arg>processed_img</arg>
<arg>lower_bound_colour1</arg>
<arg>upper_bound_colour1</arg>
<arg>lower_bound_colour2</arg>
<arg>upper_bound_colour2</arg>
</arguments>
<doc>Mask all colours in an image that are not within the two provided bounds. Masked colours become black.

Example of masking all colours but red and blue in a BGR image:
| ${img_path}=     Capture Page Screenshot
| ${processed_img}=    Read Image   ${img_path}
| ${lower1}=   Create List     0   0   200
| ${upper1}=   Create List     0   0   255
| ${lower2}=   Create List     0   200  0
| ${upper2}=   Create List     0   255  0
| ${masked_img}=    Mask Colours    ${processed_img}    ${lower1}    ${upper1}    ${lower2}    ${upper2}

For more details about this transformation see the OpenCV changing colourspaces documentation in the `Information On Image Transformations` section of the introduction.</doc>
</kw>
<kw lineno="13" name="Read Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\read_and_save_images.py">
<arguments>
<arg>img_path</arg>
</arguments>
<doc>Reads an image.

Example:
| ${img_path}=    Capture Page Screenshot
| ${read_image}=    Read Image    ${img_path}

See `Reading And Saving Images` for details about valid images to provide.</doc>
</kw>
<kw lineno="33" name="Save Image" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\read_and_save_images.py">
<arguments>
<arg>img</arg>
<arg>path=None</arg>
</arguments>
<doc>Saves processed image to log directory. Add path with image name and file extension to save image elsewhere.
Returns True if successful, otherwise returns False.

Example:
| Save Image    ${processed_img}

Example with specified location:
| Save Image    ${processed_img}    home/usr/Pictures/save_image_result.png    

See `Reading And Saving Images` for details about valid image formats.</doc>
</kw>
<kw lineno="13" name="Validate Image Content" source="C:\Users\suryasur\AppData\Local\Programs\Python\Python37\Lib\site-packages\OCRLibrary\keywords\content_validation.py">
<arguments>
<arg>processed_img</arg>
<arg>expected_content</arg>
<arg>pyt_conf=--psm 6</arg>
<arg>lang=eng</arg>
</arguments>
<doc>Confirms that an image contains the expected content. If the content is not found, ``ContentNotFound`` will be raised.

See `Pytesseract Configuration Strings` for details about pyt_conf and lang arguments.</doc>
</kw>
</keywordspec>